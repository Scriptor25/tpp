include "../std/std.t++"

struct vec3 {
    [f64] e = [3, 0]
}

:vec3
def vec3 new() = {}
def vec3 new(f64 x, f64 y, f64 z) = {{x, y, z}}

def f64 x(vec3 self) = self.e[0]
def f64 y(vec3 self) = self.e[1]
def f64 z(vec3 self) = self.e[2]

def vec3 neg(vec3 self) = vec3:new(-self.e[0], -self.e[1], -self.e[2])

def vec3 adde(vec3 self, vec3 v) = (
    self.e[0] += v.e[0]
    self.e[1] += v.e[1]
    self.e[2] += v.e[2]
    self
)

def vec3 mule(vec3 self, f64 t) = (
    self.e[0] *= t
    self.e[1] *= t
    self.e[2] *= t
    self
)

def vec3 dive(vec3 self, f64 t) = vec3:mule(self, 1 / t)

def f64 length_squared(vec3 self) = self.e[0] * self.e[0] + self.e[1] * self.e[1] + self.e[2] * self.e[2]
def f64 length(vec3 self) = sqrt(vec3:length_squared(self))

def i1 near_zero(vec3 self) = (
    def s = 0.00000001
    def is = (abs(self.e[0]) < s) && (abs(self.e[1]) < s) && (abs(self.e[2]) < s)
)

def vec3 add(vec3 l, vec3 r) = vec3:new(l.e[0] + r.e[0], l.e[1] + r.e[1], l.e[2] + r.e[2])
def vec3 sub(vec3 l, vec3 r) = vec3:new(l.e[0] - r.e[0], l.e[1] - r.e[1], l.e[2] - r.e[2])
def vec3 mul(vec3 l, vec3 r) = vec3:new(l.e[0] * r.e[0], l.e[1] * r.e[1], l.e[2] * r.e[2])
def vec3 muln(vec3 l, f64 r) = vec3:new(l.e[0] * r, l.e[1] * r, l.e[2] * r)
def vec3 nmul(f64 l, vec3 r) = vec3:muln(r, l)
def vec3 div(vec3 l, f64 r) = vec3:muln(l, 1 / r)

def f64 dot(vec3 l, vec3 r) = l.e[0] * r.e[0] + l.e[1] * r.e[1] + l.e[2] * r.e[2]
def vec3 cross(vec3 l, vec3 r) = vec3:new(
    l.e[1] * r.e[2] - l.e[2] * r.e[1],
    l.e[2] * r.e[0] - l.e[0] * r.e[2],
    l.e[0] * r.e[1] - l.e[1] * r.e[0]
)

def vec3 unit_vector(vec3 v) = vec3:div(v, vec3:length(v))

def vec3 random() = vec3:new(random(), random(), random())
def vec3 random(f64 min, f64 max) = vec3:new(random(min, max), random(min, max), random(min, max))
def vec3 random_in_unit_sphere() = (
    def p = vec3:random(-1, 1)
    while [vec3:length_squared(p) >= 1]
        p = vec3:random(-1, 1)
    p
)
def vec3 random_unit_vector() = vec3:unit_vector(vec3:random_in_unit_sphere())
def vec3 random_on_hemisphere(vec3 normal) = (
    def on_unit_sphere = vec3:random_unit_vector()
    if [vec3:dot(on_unit_sphere, normal) > 0] -> on_unit_sphere
    vec3:neg(on_unit_sphere)
)

def vec3 reflect(vec3 v, vec3 n) = vec3:sub(v, vec3:nmul(2 * vec3:dot(v, n), n))
:vec3
