include "interval.t++"

:color
def intensity = interval:new(0.000, 0.999)

def f64 linear_to_gamma(f64 linear_component) =
    if [linear_component > 0]
        sqrt(linear_component)
    else 0

def i32 int(vec3 self) = (
    def r = color:linear_to_gamma(self.x)
    def g = color:linear_to_gamma(self.y)
    def b = color:linear_to_gamma(self.z)

    def i8 ir = 256 * interval:clamp(color:intensity, r)
    def i8 ig = 256 * interval:clamp(color:intensity, g)
    def i8 ib = 256 * interval:clamp(color:intensity, b)

    (ir & 255) << 16 | (ig & 255) << 8 | (ib & 255)
)
:color
