include "hittable.t++"

struct hittable_list {
    [hittable] objects
}

:hittable_list
def hittable_list new() = {}

def hittable_list new(hittable object) = {{object}}

def clear(hittable_list self) = self.objects = {}

def add(hittable_list self, hittable object) = (
    def [hittable] tmp[self.objects.size + 1]
    for [0, self.objects.size]: i
        tmp[i] = self.objects[i]
    tmp[self.objects.size] = object
    self.objects = tmp
)

def i1 hit(hittable_list self, ray r, interval ray_t, hit_record rec) = (
    def hit_record temp_rec
    def i1 hit_anything = 0
    def closest_so_far = ray_t.max

    for [0, self.objects.size]: i (
        if [hittable:hit(self.objects[i], r, interval:new(ray_t.min, closest_so_far), temp_rec)] (
            hit_anything = 1
            closest_so_far = temp_rec.t
            rec === temp_rec
        )
    )

    hit_anything
)
:hittable_list
