include "common.t++"

def interval { f64 min = infinity, f64 max = -infinity }

:interval
def interval new() = {}

def interval new(f64 min, f64 max) = {min, max}

def f64 size(interval self) = self.max - self.min

def f64 contains(interval self, f64 x) = self.min <= x && x <= self.max
def f64 surrounds(interval self, f64 x) = self.min < x && x < self.max
def f64 clamp(interval self, f64 x) =
    if [x < self.min] self.min
    else if [x > self.max] self.max
    else x

def empty = interval:new(infinity, -infinity)
def universe = interval:new(-infinity, infinity)
:interval
