include "ray.t++"

def lambertian {
    vec3 albedo
}

:lambertian
def lambertian new(vec3 albedo) = {albedo}

def i1 scatter(lambertian self, ray r_in, hit_record rec, vec3 attenuation, ray scattered) = (
    def scatter_direction = vec3:add(rec.normal, vec3:random_unit_vector())

    if [vec3:near_zero(scatter_direction)]
        scatter_direction === rec.normal

    scattered === ray:new(rec.p, scatter_direction)
    attenuation === self.albedo
    1
)
:lambertian

def metal {
    vec3 albedo
}

:metal
def metal new(vec3 albedo) = {albedo}

def i1 scatter(metal self, ray r_in, hit_record rec, vec3 attenuation, ray scattered) = (
    def reflected = vec3:reflect(r_in.direction, rec.normal)
    scattered === ray:new(rec.p, reflected)
    attenuation === self.albedo
    1
)
:metal

def material {}

:material
def i1 scatter(material self, ray r_in, hit_record rec, vec3 attenuation, ray scattered) = (
    if [self ? lambertian] -> lambertian:scatter(self, r_in, rec, attenuation, scattered)
    if [self ? metal] -> metal:scatter(self, r_in, rec, attenuation, scattered)
    0
)
:material
