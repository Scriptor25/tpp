include "color.t++"
include "hittable.t++"
include "interval.t++"
include "material.t++"
include "ray.t++"
include "vec3.t++"

def camera {
    # public #
    f64 aspect_ratio = 1,
    i32 image_width = 100,
    i32 samples_per_pixel = 10,
    i32 max_depth = 10,

    # private #
    i32 image_height,
    f64 pixel_samples_scale,
    vec3 center,
    vec3 pixel00_loc,
    vec3 pixel_delta_u,
    vec3 pixel_delta_v
}

:camera
def camera new() = {}

def initialize(camera self) = (
    self.image_height = self.image_width / self.aspect_ratio
    self.image_height = if [self.image_height < 1] 1 else self.image_height

    self.pixel_samples_scale = 1.0 / self.samples_per_pixel

    def f64 focal_length = 1
    def f64 viewport_height = 2
    def f64 viewport_width = viewport_height * (self.image_width / self.image_height)

    def viewport_u = vec3:new(viewport_width, 0, 0)
    def viewport_v = vec3:new(0, -viewport_height, 0)

    self.pixel_delta_u = vec3:div(viewport_u, self.image_width)
    self.pixel_delta_v = vec3:div(viewport_v, self.image_height)

    def viewport_upper_left = vec3:sub(vec3:sub(vec3:sub(self.center, vec3:new(0, 0, focal_length)), vec3:div(viewport_u, 2)), vec3:div(viewport_v, 2))
    self.pixel00_loc = vec3:add(viewport_upper_left, vec3:nmul(0.5, vec3:add(self.pixel_delta_u, self.pixel_delta_v)))
)

def vec3 sample_square() = vec3:new(random() - 0.5, random() - 0.5, 0)

def ray get_ray(camera self, i32 i, i32 j) = (
    def offset = camera:sample_square()
    def pixel_sample = vec3:add(vec3:add(self.pixel00_loc, vec3:nmul(i + offset.x, self.pixel_delta_u)), vec3:nmul(j + offset.y, self.pixel_delta_v))

    def ray_origin = self.center
    def ray_direction = vec3:sub(pixel_sample, ray_origin)

    ray:new(ray_origin, ray_direction)
)

def vec3 ray_color(camera self, ray r, i32 depth, hittable world) = (
    if [depth <= 0] -> {}
    
    def hit_record rec

    if [hittable:hit(world, r, interval:new(0.001, infinity), rec)] (
        def ray scattered
        def vec3 attenuation
        if [material:scatter(rec.mat, r, rec, attenuation, scattered)]
            -> vec3:mul(attenuation, camera:ray_color(self, scattered, depth - 1, world))
        -> {}
    )

    def unit_direction = vec3:unit_vector(r.direction)
    def a = 0.5 * (unit_direction.y + 1)
    vec3:add(vec3:nmul(1 - a, vec3:new(1, 1, 1)), vec3:nmul(a, vec3:new(0.5, 0.7, 1)))
)

def render(camera self, hittable world) = (
    camera:initialize(self)

    def image = image:new(self.image_width, self.image_height)

    for [0, self.image_height]: j (
        printf("\rScanlines remaining: %5.0f", self.image_height - j)
        for [0, self.image_width]: i (
            def pixel_color = vec3:new(0, 0, 0)
            for [0, self.samples_per_pixel] (
                def r = camera:get_ray(self, i, j)
                vec3:adde(pixel_color, camera:ray_color(self, r, self.max_depth, world))
            )
            image:setPixel(image, i, j, color:int(vec3:nmul(self.pixel_samples_scale, pixel_color)))
        )
    )

    printf("\rWriting image...          ")
    image:write(image, "out.ppm")
    printf("\rDone.           \n")
)
:camera
